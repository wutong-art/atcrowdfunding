<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
    <display-name>Archetype Created Web Application</display-name>

    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-*.xml</param-value>
    </context-param>

  <!--配置CharacterEncodingFilter-->
    <filter>
      <filter-name>characterEncodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
          <param-name>encoding</param-name>
          <param-value>UTF-8</param-value>
        </init-param>
      <!--强制请求设置字符集-->
        <init-param>
          <param-name>forceRequestEncoding</param-name>
          <param-value>true</param-value>
        </init-param>
      <!--强制响应设置字符集-->
        <init-param>
          <param-name>forceResponseEncoding</param-name>
          <param-value>true</param-value>
        </init-param>
    </filter>
      <!--这个filter的执行顺序要在所有其他Filter前面-->
      <!--原因如下：-->
      <!--request.setCharacterEncoding(encoding)必须在request.getParamter()前面-->
      <!--response.setCharacterEncoding(encoding)必须在request.getWriter()前面-->
    <filter-mapping>
      <filter-name>characterEncodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>

  <!--配置ContextLoaderListener-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>


  <servlet>
    <servlet-name>dispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <!---->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <!--url-pattern配置方式一:/表示拦截所有的请求-->
    <!--<url-pattern>/</url-pattern>-->

    <!--url-pattern配置方式二：配置请求扩展名-->
    <!--优点1：xxx.css、xxx.js、xxx.png等等静态资源完全不经过SpringMVC,不需要特殊处理-->
    <!--优点2：可以实现伪静态效果，表面上看起来是访问一个HTML文件这样的静态资源，但实际上是经过Java代码运算的结果-->
    <!--伪静态作用1：给黑客入侵增加难度-->
    <!--伪静态作用2：有利于SEO优化，让百度谷歌这样的搜索引擎更容易找到我们的项目-->
    <!--不符合restful风格-->
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <!--如果一个Ajax请求扩展名是html,但是实际服务器给浏览器返回的是json数据
    二者就不匹配了，会报406错误-->
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>


</web-app>
